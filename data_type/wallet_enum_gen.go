// Code generated by "go run clinic-pilot/tool/stringer -linecomment -type=WalletLogoType -output=wallet_enum_gen.go -swagoutput=../tool/swag/enum_gen/wallet_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WalletLogoTypeCash-1]
	_ = x[WalletLogoTypeBank-2]
	_ = x[WalletLogoTypeCreditCard-3]
	_ = x[WalletLogoTypeLoan-4]
	_ = x[WalletLogoTypeInsurance-5]
	_ = x[WalletLogoTypeInvestment-6]
	_ = x[WalletLogoTypeMortgage-7]
	_ = x[WalletLogoTypeBonus-8]
	_ = x[WalletLogoTypeOther-9]
}

const _WalletLogoType_nameReadable = "CASH, BANK, CREDIT_CARD, LOAN, INSURANCE, INVESTMENT, MORTGAGE, BONUS, OTHER"

const _WalletLogoType_name = "CASHBANKCREDIT_CARDLOANINSURANCEINVESTMENTMORTGAGEBONUSOTHER"

var _WalletLogoType_index = [...]uint8{0, 4, 8, 19, 23, 32, 42, 50, 55, 60}

func (i *WalletLogoType) determine(s string) {
	switch s {
	case "CASH":
		*i = WalletLogoTypeCash
	case "BANK":
		*i = WalletLogoTypeBank
	case "CREDIT_CARD":
		*i = WalletLogoTypeCreditCard
	case "LOAN":
		*i = WalletLogoTypeLoan
	case "INSURANCE":
		*i = WalletLogoTypeInsurance
	case "INVESTMENT":
		*i = WalletLogoTypeInvestment
	case "MORTGAGE":
		*i = WalletLogoTypeMortgage
	case "BONUS":
		*i = WalletLogoTypeBonus
	case "OTHER":
		*i = WalletLogoTypeOther
	default:
		*i = 0
	}
}

func (i WalletLogoType) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i WalletLogoType) GetValidValuesString() string {
	return _WalletLogoType_nameReadable
}

func (i WalletLogoType) String() string {
	i -= 1
	if i < 0 || i >= WalletLogoType(len(_WalletLogoType_index)-1) {
		return "WalletLogoType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _WalletLogoType_name[_WalletLogoType_index[i]:_WalletLogoType_index[i+1]]
}

func (i WalletLogoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *WalletLogoType) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *WalletLogoType) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *WalletLogoType) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i WalletLogoType) Value() (driver.Value, error) {
	return i.String(), nil
}

func WalletLogoTypeP(v WalletLogoType) *WalletLogoType {
	return &v
}

func ListWalletLogoType() []WalletLogoType {
	return []WalletLogoType{
		WalletLogoTypeCash,
		WalletLogoTypeBank,
		WalletLogoTypeCreditCard,
		WalletLogoTypeLoan,
		WalletLogoTypeInsurance,
		WalletLogoTypeInvestment,
		WalletLogoTypeMortgage,
		WalletLogoTypeBonus,
		WalletLogoTypeOther,
	}
}

func ListWalletLogoTypeString() []string {
	return []string{
		WalletLogoTypeCash.String(),
		WalletLogoTypeBank.String(),
		WalletLogoTypeCreditCard.String(),
		WalletLogoTypeLoan.String(),
		WalletLogoTypeInsurance.String(),
		WalletLogoTypeInvestment.String(),
		WalletLogoTypeMortgage.String(),
		WalletLogoTypeBonus.String(),
		WalletLogoTypeOther.String(),
	}
}
